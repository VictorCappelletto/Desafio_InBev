# ==============================================================================
# Poetry Configuration
# ==============================================================================
[tool.poetry]
name = "desafio-inbev"
version = "0.1.0"
description = "Plataforma de orquestra√ß√£o de dados com Apache Airflow, Azure e Databricks"
authors = ["victor.castro <victorcappelletto@gmail.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/victorcappelleto/Desafio_InBev"
repository = "https://github.com/victorcappelleto/Desafio_InBev"
keywords = ["airflow", "azure", "databricks", "etl", "data-engineering"]

[tool.poetry.dependencies]
python = "^3.11"
mkdocs = "^1.6.0"
mkdocs-mermaid2-plugin = "^1.2.2"
mkdocs-material = "^9.5.27"
mkdocstrings = {extras = ["python"], version = "^0.25.1"}
taskipy = "^1.14.1"
isort = "^5.13.2"
black = "^25.9.0"
pytest = "^8.4.2"
pytest-cov = "^6.0.0"
requests = "^2.32.3"
pyodbc = "^5.2.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ==============================================================================
# Black - Code Formatter
# ==============================================================================
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | logs
)/
'''

# ==============================================================================
# isort - Import Sorter
# ==============================================================================
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["logs/*", ".venv/*", "build/*"]

# ==============================================================================
# pytest - Testing Framework
# ==============================================================================
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",                    # Verbose output
    "--strict-markers",      # Error on unknown markers
    "--tb=short",           # Short traceback format
    "--disable-warnings",   # Disable warnings
    "-ra",                  # Show all test results
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# ==============================================================================
# Coverage
# ==============================================================================
[tool.coverage.run]
source = ["dags"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

# ==============================================================================
# Taskipy - Task Runner
# ==============================================================================
[tool.taskipy.tasks]
format = """
echo "üé® Formatting code..."
isort .
black .
echo "‚úÖ Code formatted!"
"""

lint = """
echo "üîç Linting code..."
black --check .
isort --check-only .
echo "‚úÖ Code is clean!"
"""

test = """
echo "üß™ Running tests..."
pytest -v
echo "‚úÖ Tests completed!"
"""

test-cov = """
echo "üß™ Running tests with coverage..."
pytest --cov=dags --cov-report=html --cov-report=term
echo "‚úÖ Coverage report generated in htmlcov/"
"""

doc = """
echo "üìö Starting documentation server..."
mkdocs serve
"""

doc-build = """
echo "üìö Building documentation..."
mkdocs build --strict
echo "‚úÖ Documentation built in site/"
"""

doc-deploy = """
echo "üöÄ Deploying documentation to GitHub Pages..."
mkdocs gh-deploy --force
echo "‚úÖ Documentation deployed!"
echo "üìñ Visit: https://victorcappelleto.github.io/Desafio_InBev/"
"""

check = """
echo "üîç Running all checks..."
task lint
task test
echo "‚úÖ All checks passed!"
"""

clean = """
echo "üßπ Cleaning build artifacts..."
rm -rf build/
rm -rf dist/
rm -rf *.egg-info
rm -rf .pytest_cache
rm -rf .coverage
rm -rf htmlcov/
rm -rf site/
find . -type d -name __pycache__ -exec rm -rf {} +
find . -type f -name "*.pyc" -delete
echo "‚úÖ Cleaned!"
"""

kill = "kill -9 $(lsof -t -i :8000)"
