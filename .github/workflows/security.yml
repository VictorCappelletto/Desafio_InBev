name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans every Monday at 9 AM
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  # ===========================================================================
  # Job 1: Secret Scanning
  # ===========================================================================
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        # Skip TruffleHog on push without diff (direct commits)
        if: github.event_name == 'pull_request' || github.event_name == 'schedule'
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # ===========================================================================
  # Job 2: Dependency Security Audit
  # ===========================================================================
  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
      
      - name: Run Safety check
        run: |
          pip install safety
          poetry export -f requirements.txt --output requirements-check.txt --without-hashes
          safety check -r requirements-check.txt --output json > safety-report.json || true
      
      - name: Upload Safety report
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety-report.json

  # ===========================================================================
  # Job 3: SAST (Static Application Security Testing)
  # ===========================================================================
  sast-scan:
    name: SAST Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Bandit
        run: pip install bandit[toml]
      
      - name: Run Bandit security scan
        run: |
          bandit -r dags/ \
            -f json \
            -o bandit-report.json \
            -ll \
            -x "dags/examples/*" || true
      
      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json
      
      - name: Generate Bandit summary
        run: |
          bandit -r dags/ -ll -x "dags/examples/*" || true

  # ===========================================================================
  # Job 4: CodeQL Analysis
  # ===========================================================================
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # ===========================================================================
  # Job 5: Docker Security Scan
  # ===========================================================================
  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: desafio-inbev:security-scan
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'desafio-inbev:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Generate Trivy report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'desafio-inbev:security-scan'
          format: 'table'
          severity: 'CRITICAL,HIGH'

  # ===========================================================================
  # Job 6: License Compliance
  # ===========================================================================
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
      
      - name: Check licenses
        run: |
          pip install pip-licenses
          poetry export -f requirements.txt --output requirements-licenses.txt --without-hashes
          pip install -r requirements-licenses.txt
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --format=markdown --output-file=licenses.md
      
      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: |
            licenses.json
            licenses.md

  # ===========================================================================
  # Job 7: Security Summary
  # ===========================================================================
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [secret-scan, dependency-audit, sast-scan, codeql-analysis, docker-security, license-check]
    if: always()
    
    steps:
      - name: Generate Security Summary
        run: |
          echo "================================"
          echo "SECURITY SCAN SUMMARY"
          echo "================================"
          echo ""
          echo "Secret Scanning: Complete"
          echo "Dependency Audit: Complete"
          echo "SAST Scanning: Complete"
          echo "CodeQL Analysis: Complete"
          echo "Docker Security: Complete"
          echo "License Check: Complete"
          echo ""
          echo "================================"
          echo "View detailed results in:"
          echo "  - Security tab"
          echo "  - Artifacts"
          echo "================================"
