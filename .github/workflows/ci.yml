name: CI - Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.0'

jobs:
  # ===========================================================================
  # Job 1: Lint and Format Check
  # ===========================================================================
  lint:
    name: 🎨 Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: 📚 Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: 📥 Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      
      - name: 🔍 Check with Black
        run: poetry run black --check .
      
      - name: 🔍 Check with isort
        run: poetry run isort --check-only .
      
      - name: ✅ Lint passed
        run: echo "✅ Code formatting is correct!"

  # ===========================================================================
  # Job 2: Unit Tests
  # ===========================================================================
  test:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: 📚 Load cached venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: 📥 Install dependencies
        run: poetry install --no-interaction
      
      - name: 🧪 Run tests with coverage
        run: |
          poetry run pytest \
            --cov=dags \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            -v
      
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      
      - name: 📈 Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
      
      - name: ✅ Tests passed
        run: echo "✅ All tests passed!"

  # ===========================================================================
  # Job 3: Security Checks
  # ===========================================================================
  security:
    name: 🔒 Security Checks
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: 📥 Install dependencies
        run: poetry install --no-interaction
      
      - name: 🔒 Run Bandit (security linter)
        run: |
          pip install bandit
          bandit -r dags/ -ll -f json -o bandit-report.json || true
      
      - name: 🔍 Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
      
      - name: 📊 Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: bandit-report.json
      
      - name: ✅ Security checks passed
        run: echo "✅ No security issues found!"

  # ===========================================================================
  # Job 4: DAG Validation
  # ===========================================================================
  dag-validation:
    name: ✈️ DAG Validation
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: 📥 Install dependencies
        run: poetry install --no-interaction
      
      - name: 🔍 Validate DAG syntax
        run: |
          for dag in dags/*.py; do
            if [[ "$dag" != *"__"* ]]; then
              echo "Validating $dag..."
              poetry run python "$dag" || exit 1
            fi
          done
      
      - name: ✅ DAG validation passed
        run: echo "✅ All DAGs are valid!"

  # ===========================================================================
  # Job 5: Docker Build
  # ===========================================================================
  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: [test, security, dag-validation]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔨 Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: desafio-inbev:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: ✅ Docker build passed
        run: echo "✅ Docker image built successfully!"

  # ===========================================================================
  # Job 6: Documentation Build
  # ===========================================================================
  docs:
    name: 📚 Documentation Build
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: 📥 Install dependencies
        run: poetry install --no-interaction
      
      - name: 📚 Build documentation
        run: poetry run mkdocs build
      
      - name: 📊 Upload docs artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: site/
      
      - name: ✅ Docs build passed
        run: echo "✅ Documentation built successfully!"

  # ===========================================================================
  # Job 7: Summary
  # ===========================================================================
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [lint, test, security, dag-validation, docker-build, docs]
    if: success()
    
    steps:
      - name: 🎉 CI Pipeline Passed
        run: |
          echo "================================"
          echo "✅ CI PIPELINE PASSED!"
          echo "================================"
          echo "✅ Lint: Passed"
          echo "✅ Tests: Passed"
          echo "✅ Security: Passed"
          echo "✅ DAG Validation: Passed"
          echo "✅ Docker Build: Passed"
          echo "✅ Docs: Passed"
          echo "================================"
          echo "🚀 Ready for merge!"

